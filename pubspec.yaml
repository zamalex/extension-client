name: extension
description: Extension Flutter project.


# The following line prevents the package from being accidentally published to
# pub.dev using `pub publish`. This is preferred for private packages.
publish_to: "none" # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
version: 15.0.2+29

environment:
  sdk: ">=2.8.0 <3.0.0"
  flutter: ">=1.22.0 <2.0.0"

dependencies:
  flutter:
    sdk: flutter
  flutter_localizations:
    sdk: flutter
  # A Flutter plugin for iOS and Android allowing access to the device cameras.
  # A Flutter plugin for finding commonly used locations on the filesystem.
  path_provider: ^2.0.11
  # A comprehensive, cross-platform path manipulation library for Dart.
  path: ^1.8.0-nullsafety.1
  # A simple Service Locator.
  get_it: ^7.2.0
  # BLoC Design Pattern (Business Logic Component)
  bloc: ^6.1.0
  # Widgets that make it easy to integrate blocs and cubits into Flutter.
  flutter_bloc: ^6.1.1
  # Dart implementation of sprintf.
  sprintf: ^7.0.0
  # Flutter plugin for reading and writing simple key-value pairs. Wraps NSUserDefaults on iOS and SharedPreferences on Android.
  shared_preferences: ^2.0.15
  # A Flutter plugin to easily handle realtime location in iOS and Android.
  location: any
  # Introduction/Onboarding package for flutter app with some customizations possibilities.
  introduction_screen: any
  # A package provides an easy way to add shimmer effect in Flutter project.
  shimmer: any
  # A Markdown renderer for Flutter.
  flutter_markdown: any
  # Flutter plugin for launching a URL on Android and iOS. Supports web, phone, SMS, and email schemes.
  url_launcher: any
  # A Flutter plugin for integrating Google Maps in iOS and Android applications.
  google_maps_flutter: any
  # A widget provided to the flutter scroll component drop-down refresh and pull up load.
  pull_to_refresh: any
  # An abstract class that helps to implement equality without needing to explicitly override == and hashCode.
  equatable: any
  # Custom Radio Buttons and Grouped Check Box Button.
  custom_radio_grouped_button: any
  # The best swiper(carousel) for flutter, with multiple layouts, infinite loop. Compatible with Android & iOS.
  flutter_swiper: any
  # Flutter library to load and cache network images. Can also be used with placeholder and error widgets.
  cached_network_image: any
  # Flutter plugin for sharing content via the platform share UI, using the ACTION_SEND intent on Android and UIActivityViewController on iOS.
  share: any
  # Flutter plugin for querying information about the application package, such as CFBundleVersion on iOS or versionCode on Android.
  package_info: any
  # Flutter plugin for selecting images from the Android and iOS image library, and taking new pictures with the camera.
  # A list with helper methods to programmatically scroll to an item.
  scrollable_positioned_list: any
  # Flutter library for simple and fast QR code rendering via a Widget or custom painter.
  # A really simple Flutter plugin to add events to each platform's default calendar.
  add_2_calendar: any
  # Slidable list item with directional slide actions that can be dismissed.
  flutter_slidable: any
  # Provides APIs for debugging and error logging.

  # A simple zoomable image/content widget.
  photo_view: any

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: any
  marquee: any
  flutter_phoenix: any
  http: any
  provider: any
  carousel_slider: any
  #intl_translation: ^0.17.10+1
  flutter_datetime_picker: any
  intl: any
  image_picker: any
  rating_dialog: any
  flutter_overboard: any
  go_sell_sdk_flutter: any
  # firebase_crashlytics: any
  firebase_core: any
  #firebase dynamic links
  firebase_dynamic_links: any

  #onesignal
  #onesignal_flutter: any

#check version of app
  new_version: any
  firebase_analytics: any
  firebase_database: any
  firebase_messaging: ^14.1.3


dev_dependencies:
  change_app_package_name: ^1.1.0
  flutter_test:
    sdk: flutter
  flutter_launcher_icons: ^0.10.0

flutter_icons:
  android: "launcher_icon"
  ios: true
  image_path: "assets/images/newicon.png"

#dependency_overrides:
#intl: ^0.17.0-nullsafety.2
# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec
# The following section is specific to Flutter.
flutter:
  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/data/
    - assets/images/
    - assets/images/onboarding/
    - assets/images/data/
    - assets/images/data/staff/
    - assets/images/pin.png

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware.
  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages
  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
  fonts:
    - family: Expo
      fonts:
        - asset: assets/fonts/Expo-Medium.ttf
        - asset: assets/fonts/Expo-Light.ttf
        - asset: assets/fonts/Expo-Book.ttf
        - asset: assets/fonts/Expo-Bold.ttf
    - family: halter
      fonts:
        - asset: assets/fonts/halter.ttf

flutter_intl:
  enabled: true # Required. Must be set to true to activate the plugin. Default: false
  class_name: L10n # Optional. Sets the name for the generated localization class. Default: S
  main_locale: en # Optional. Sets the main locale used for generating localization files. Provided value should consist of language code and optional script and country codes separated with underscore (e.g. 'en', 'en_GB', 'zh_Hans', 'zh_Hans_CN'). Default: en
